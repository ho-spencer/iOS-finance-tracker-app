General Steps:
1. Setup Backend (Flask, Postgre, Flask-SQLAlchemy)
2. Setup Flask Environment (.env)
3. Setup Flask configuration (config.py)
4. Define Models


Backend Technologies:
  - Flask
  - PostgreSQL
  - Flask-SQLAlchemy
    - Flask extenstion that integrates SQLAlchemy with Flask apps
    - Python library
    - Install Cmd: pip install Flask-SQLAlchemy
  - PostgreSQL suport
    - Needed for Flask-SQLAlchemy to connect to PostgreSQL database
    - PostgreSQL database adapter for Python
    - Install Cmd: pip install psycopg2-binary


Setting up .env:
  - Flask environment, secret key, database url created
  - Install Cmd: pip install python-dotenv


Setting up config.py (Flask configuration name and description)
Reference: https://flask-sqlalchemy.palletsprojects.com/en/latest/config/#configuration-keys
  - SECRET_KEY: get the secret key from .env
  - SQLALCHEMY_DATABASE_URI
    - Get the database URL from .env
    - How SQLAlchemy connects with the database
    - "SQLALCHEMY_DATABASE_URI" is a common Flask configuration name
  - SQLALCHEMY_TRACK_MODIFICATIONS
    - Tracks object changes (if set to True)
    - Setting to false reduces overhead and uses less memory
  - DEBUG
    - enable debug mode in development
    - "os.getenv("DEBUG", "False") == "True"" allows us to control the setting from the .env file


Define Models (models.py)
  - Defining a model (in Flask using SQLAlchemy) = creating a Python class to represent a table in my database
  - each class (Users, Transactions) inherits the db.Model -- SQLAlchemy's base class for all models
  - db.Model
    - provided by SQLAlchemy (Flask-SQLAlchemy)
    - allows the class to be mapped to the database table, interact with the database, and use the SQLAlchemy features
    - the Class (Users, Transactions) inherits the ORM features from db.Model
  - db.Column()
    - comes from "db = SQLAlchemy(app)" in app.py
    - define a column in the table
    - same as "sqlalchemy.Column()
  "from flask_sqlalchemy import SQLAlchemy" --> db = SQLAlchemy() 
    - gives me access oto the SQLAlchemy column types
